/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hospitalmanagementdbmsproject;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Faysal Ahmad
 */
public class StaffPage extends javax.swing.JFrame {

    Connection con, con2;
    PreparedStatement patient, inpatient, outpatient, select, delete, update, search, shortBy;
    String user = "ADMIN";

    public Connection getConnection() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/hospital_management", "root", "");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        return con;
    }

    public StaffPage() {
        initComponents();
        getPatientData();
        ResultSet result = getDoctorData();
        ResultSetMetaData rss;
        updateBillBtn.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        patientPhnNoTf = new javax.swing.JTextField();
        patientAddressTf = new javax.swing.JTextField();
        genderCB = new javax.swing.JComboBox<>();
        buildingLabel = new javax.swing.JLabel();
        buildingCB = new javax.swing.JComboBox<>();
        idSearchTf = new javax.swing.JTextField();
        roomNoCB = new javax.swing.JComboBox<>();
        nameSearchBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        shortByCB = new javax.swing.JComboBox<>();
        patientNameTf = new javax.swing.JTextField();
        makeBillBtn = new javax.swing.JButton();
        idSearchBtn = new javax.swing.JButton();
        inPatientBtn = new javax.swing.JButton();
        dctrBtn = new javax.swing.JButton();
        roomLabel = new javax.swing.JLabel();
        tableNameLabel = new javax.swing.JLabel();
        doctorIdlabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        userlabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dctrPatientTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        patientAgeTf = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        outPateintBtn = new javax.swing.JButton();
        diseaseLabel = new javax.swing.JLabel();
        diseaseCB = new javax.swing.JComboBox<>();
        buildingSearchCB1 = new javax.swing.JComboBox<>();
        dctrIdTf = new javax.swing.JTextField();
        updateBillBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        patientPhnNoTf.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        patientPhnNoTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientPhnNoTfActionPerformed(evt);
            }
        });

        patientAddressTf.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        genderCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));

        buildingLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buildingLabel.setText("Building:");

        buildingCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "B1", "B2", "B3", "B4" }));

        idSearchTf.setText("Enter ID");
        idSearchTf.setToolTipText("");
        idSearchTf.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                idSearchTfFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                idSearchTfFocusLost(evt);
            }
        });

        roomNoCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "201", "202", "203", "204", "205", "206", "207", "208", "209", "210", "211" }));

        nameSearchBtn.setText("Search");
        nameSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameSearchBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Gender:");

        shortByCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Short By", "Name", "Building" }));
        shortByCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shortByCBActionPerformed(evt);
            }
        });

        patientNameTf.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        makeBillBtn.setBackground(new java.awt.Color(51, 153, 0));
        makeBillBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        makeBillBtn.setForeground(new java.awt.Color(255, 255, 255));
        makeBillBtn.setText("Make Bill");
        makeBillBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeBillBtnActionPerformed(evt);
            }
        });

        idSearchBtn.setText("Search");
        idSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idSearchBtnActionPerformed(evt);
            }
        });

        inPatientBtn.setText("In Patient");
        inPatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inPatientBtnActionPerformed(evt);
            }
        });

        dctrBtn.setText("Doctor");
        dctrBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dctrBtnActionPerformed(evt);
            }
        });

        roomLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        roomLabel.setText("Room No:");

        tableNameLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tableNameLabel.setText("In Patients");

        doctorIdlabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        doctorIdlabel.setText("Doctor ID:");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setText("EWU HOSPITAL");

        jPanel1.setBackground(new java.awt.Color(51, 153, 0));

        userlabel.setBackground(new java.awt.Color(255, 51, 0));
        userlabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        userlabel.setForeground(new java.awt.Color(255, 255, 255));
        userlabel.setText("STAFF");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(userlabel)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(userlabel)
                .addContainerGap())
        );

        dctrPatientTable.setBorder(new javax.swing.border.MatteBorder(null));
        dctrPatientTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dctrPatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Name", "Building", "Room No", "Phone No"
            }
        ));
        dctrPatientTable.setRowHeight(25);
        dctrPatientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dctrPatientTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(dctrPatientTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Name:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Age:");

        patientAgeTf.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Address:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Phone No:");

        outPateintBtn.setText("Out Patient");
        outPateintBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outPateintBtnActionPerformed(evt);
            }
        });

        diseaseLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        diseaseLabel.setText("Disease: ");

        diseaseCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Disease", "Heart", "Skin", "Bones", "Nose", "Ear", "Tified", "Cancer", "Stomach", "Brain", "Tumor", "Sex Related" }));

        buildingSearchCB1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Disease", "Heart", "Skin", "Bones", "Nose", "Ear", "Tified", "Cancer", "Stomach", "Brain", "Tumor", "Sex Related" }));
        buildingSearchCB1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                buildingSearchCB1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                buildingSearchCB1FocusLost(evt);
            }
        });

        updateBillBtn.setBackground(new java.awt.Color(0, 153, 153));
        updateBillBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        updateBillBtn.setText("Update Bill");
        updateBillBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBillBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(142, 142, 142))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addGap(30, 30, 30))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(diseaseLabel)
                                                    .addComponent(buildingLabel))
                                                .addGap(31, 31, 31)))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(patientAddressTf, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(patientPhnNoTf, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buildingCB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(makeBillBtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(updateBillBtn))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(genderCB, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(patientAgeTf, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(inPatientBtn)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(outPateintBtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(dctrBtn))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(patientNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(roomLabel)
                                        .addGap(20, 20, 20)
                                        .addComponent(roomNoCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(91, 91, 91)
                                        .addComponent(diseaseCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(doctorIdlabel)
                                        .addGap(18, 18, 18)
                                        .addComponent(dctrIdTf, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(idSearchTf, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(idSearchBtn)
                                .addGap(277, 277, 277)
                                .addComponent(buildingSearchCB1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameSearchBtn))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(tableNameLabel)
                                    .addGap(135, 135, 135)
                                    .addComponent(shortByCB, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 616, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(29, 29, 29))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tableNameLabel)
                        .addComponent(shortByCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(inPatientBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(outPateintBtn)
                            .addComponent(dctrBtn))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(patientNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(patientAgeTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(genderCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(patientAddressTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(patientPhnNoTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buildingLabel)
                            .addComponent(buildingCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(diseaseLabel)
                            .addComponent(diseaseCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(doctorIdlabel)
                            .addComponent(dctrIdTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roomLabel)
                            .addComponent(roomNoCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(makeBillBtn)
                            .addComponent(updateBillBtn)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameSearchBtn)
                    .addComponent(idSearchTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idSearchBtn)
                    .addComponent(buildingSearchCB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void idSearchTfFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_idSearchTfFocusGained

        idSearchTf.setText("");
    }//GEN-LAST:event_idSearchTfFocusGained

    private void idSearchTfFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_idSearchTfFocusLost

    }//GEN-LAST:event_idSearchTfFocusLost

    private void nameSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameSearchBtnActionPerformed

    }//GEN-LAST:event_nameSearchBtnActionPerformed

    private void shortByCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shortByCBActionPerformed
        //if(shortByCB.getSelectedIndex() == 1) shortBy(shortByCB.getSelectedIndex());
        //if(shortByCB.getSelectedIndex() == 2) shortBy(shortByCB.getSelectedIndex());
    }//GEN-LAST:event_shortByCBActionPerformed

    public ResultSet getPatientData() {
        con = getConnection();
        try {
            select = con.prepareStatement("SELECT * FROM inpatient,patient where inpatient.patient_id = patient.patient_id");
            ResultSet result = select.executeQuery();
            ResultSetMetaData Rss = result.getMetaData();
            int c = Rss.getColumnCount();
            updateTable(result, c);
            return result;
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    public ResultSet getOutPatient() {
        con = getConnection();
        try {
            outpatient = con.prepareStatement("SELECT * FROM outpatient,patient where outpatient.patient_id = patient.patient_id");
            ResultSet result = outpatient.executeQuery();
            ResultSetMetaData Rss = result.getMetaData();
            int c = Rss.getColumnCount();
            updateTable(result, c);
            return result;
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    public void addData(String name, String building, String gender, int age, String address, String Phn_no, int doctor_id, String disease, int room_no) {
        try {

            con = getConnection();
            con2 = getConnection();
            long millis = System.currentTimeMillis();
            java.sql.Date date = new java.sql.Date(millis);

            patient = con.prepareStatement("insert into patient(name,age,gender,address,phn_no,disease,doctor_id) values(?,?,?,?,?,?,?)");

            patient.setString(1, name);
            patient.setInt(2, age);
            patient.setString(3, gender);
            patient.setString(4, address);
            patient.setString(5, Phn_no);
            patient.setString(6, disease);
            patient.setInt(7, doctor_id);
            patient.executeUpdate();

            inpatient = con2.prepareStatement("insert into inpatient(building,room_no,date_of_admit) values(?,?,?)");

            inpatient.setString(1, building);
            inpatient.setInt(2, room_no);
            inpatient.setDate(3, date);
            inpatient.executeUpdate();

            JOptionPane.showMessageDialog(null, "Record Added Successfully", "Success", 1);
            setText("", "", "", 0, "Male", "101", "1", "", "Select Disease");
            getPatientData();

        } catch (SQLException ex) {
            Logger.getLogger(HospitalManagementDBMSProject.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void release(int id) {
        con = getConnection();
        con2 = getConnection();

        long millis = System.currentTimeMillis();
        java.sql.Date date = new java.sql.Date(millis);

        try {

            outpatient = con.prepareStatement("insert into outpatient(patient_id,date_of_release) values(?,?)");
            outpatient.setInt(1, id);
            outpatient.setDate(2, date);
            outpatient.executeUpdate();

            //deleting from inpatient
            inpatient = con2.prepareStatement("delete from inpatient where patient_id = ?");
            inpatient.setInt(1, id);
            inpatient.executeUpdate();
            
            //deleting bill
            inpatient = con2.prepareStatement("delete from bill where patient_id = ?");
            inpatient.setInt(1, id);
            inpatient.executeUpdate();

            JOptionPane.showMessageDialog(null, "Patient Deleted Successfully", "Success", 1);
            setText("", "", "", 0, "Male", "101", "1", "", "Select Disease");
            getPatientData();

        } catch (SQLException ex) {
            Logger.getLogger(StaffPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void makeBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeBillBtnActionPerformed

        if (makeBillBtn.getText().equals("Make Bill")) {
            new BillDialoge(patientNameTf.getText(), buildingCB.getSelectedItem().toString(), genderCB.getSelectedItem().toString(),
                    Integer.parseInt(patientAgeTf.getText()), patientAddressTf.getText(), patientPhnNoTf.getText(), Integer.parseInt(dctrIdTf.getText()),
                    diseaseCB.getSelectedItem().toString(), Integer.parseInt(roomNoCB.getSelectedItem().toString())).setVisible(true);
        } else if (makeBillBtn.getText().equals("Relase Patient")) {
            con = new StaffPage().getConnection();

            try {

                DefaultTableModel table = (DefaultTableModel) dctrPatientTable.getModel();
                int index = dctrPatientTable.getSelectedRow();
                String id = table.getValueAt(index, 0).toString();

                select = con.prepareStatement("select * from bill where patient_id = ?");
                select.setString(1, id);

                ResultSet result = select.executeQuery();

                while (result.next()) {
                    String due  = result.getString("due");
                    if(due.equals("0"))
                    {
                        release(Integer.parseInt(id));
                        break;
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Bill is Not Clear", "Update Bill", -1);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_makeBillBtnActionPerformed

    private void idSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idSearchBtnActionPerformed

        if (!idSearchTf.getText().isEmpty()) {
            //search("", "Select Building", Integer.parseInt(idSearchTf.getText()),"");
        } else {
            JOptionPane.showMessageDialog(null, "Please Enter ID", "Error", -1);
        }
    }//GEN-LAST:event_idSearchBtnActionPerformed

    private void inPatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inPatientBtnActionPerformed
        makeBillBtn.setBackground(Color.GREEN);
        makeBillBtn.setForeground(Color.black);
        makeBillBtn.setText("Make Bill");
        makeBillBtn.setVisible(true);
        dctrIdTf.setVisible(true);
        doctorIdlabel.setText("Dcotor Of");
        doctorIdlabel.setVisible(true);
        diseaseCB.setVisible(true);
        diseaseLabel.setVisible(true);
        tableNameLabel.setText("In Patients");
        dctrPatientTable.getColumnModel().getColumn(3).setHeaderValue("Room No");
        updateBillBtn.setVisible(false);
        setText("", "", "", 0, "Male", "101", "1", "", "Select Disease");
        getPatientData();
    }//GEN-LAST:event_inPatientBtnActionPerformed

    public void setText(String name, String address, String phn_no, int age, String gender, String building, String doctor_id, String room_no, String disease) {

        patientNameTf.setText(name);
        patientAddressTf.setText(address);
        patientPhnNoTf.setText(phn_no);
        if (age != 0) {
            patientAgeTf.setText(String.valueOf(age));
        } else {
            patientAgeTf.setText("");
        }
        genderCB.setSelectedItem(gender);
        buildingCB.setSelectedItem(building);
        dctrIdTf.setText(doctor_id);
        diseaseCB.setSelectedItem(disease);
        roomNoCB.setSelectedItem(room_no);
    }

    public ResultSet getDoctorData() {
        con = getConnection();
        try {
            select = con.prepareStatement("select * from doctor");
            ResultSet result = select.executeQuery();
            return result;
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    public void updateTable(ResultSet result, int c) {
        try {
            DefaultTableModel table = (DefaultTableModel) dctrPatientTable.getModel();
            table.setRowCount(0);

            while (result.next()) {
                Vector v = new Vector();
                for (int i = 1; i <= c; i++) {
                    if (!tableNameLabel.getText().equals("Doctors")) {
                        v.add(result.getString("patient_id"));
                    } else {
                        v.add(result.getString("doctor_id"));
                    }
                    v.add(result.getString("name"));
                    if (!tableNameLabel.getText().equals("Out Patients")) {
                        v.add(result.getString("building"));
                    }
                    if (!tableNameLabel.getText().equals("Out Patients")) {
                        v.add(result.getString("room_no"));
                    } else {
                        v.add("");
                    }
                    if (tableNameLabel.getText().equals("Out Patients")) {
                        v.add(result.getString("date_of_release"));
                    }
                    v.add(result.getString("phn_no"));
                }
                table.addRow(v);
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void dctrBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dctrBtnActionPerformed
        updateBillBtn.setVisible(false);
        dctrIdTf.setVisible(true);
        doctorIdlabel.setText("Dcotor Of");
        doctorIdlabel.setVisible(true);
        tableNameLabel.setText("Doctors");
        makeBillBtn.setVisible(false);
        diseaseCB.setVisible(false);
        diseaseLabel.setVisible(false);
        setText("", "", "", 0, "", "", "", "", "Select Disease");
        ResultSet result = getDoctorData();
        ResultSetMetaData Rss;
        try {
            Rss = result.getMetaData();
            int c = Rss.getColumnCount();
            updateTable(result, c);
        } catch (SQLException ex) {
            Logger.getLogger(StaffPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_dctrBtnActionPerformed

    private void dctrPatientTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dctrPatientTableMouseClicked

        if (tableNameLabel.getText().equals("In Patients")) {
            updateBillBtn.setVisible(true);
        }
        makeBillBtn.setText("Relase Patient");
        makeBillBtn.setBackground(Color.red);
        DefaultTableModel table = (DefaultTableModel) dctrPatientTable.getModel();
        int index = dctrPatientTable.getSelectedRow();
        String id = table.getValueAt(index, 0).toString();
        con = getConnection();

        try {
            if (tableNameLabel.getText().equals("Doctors")) {
                select = con.prepareStatement("select * from doctor where doctor_id = ?");
                buildingLabel.setVisible(true);
                buildingCB.setVisible(true);
                roomLabel.setVisible(true);
                roomNoCB.setVisible(true);
            } else if (tableNameLabel.getText().equals("Out Patients")) {
                buildingLabel.setVisible(false);
                buildingCB.setVisible(false);
                roomLabel.setVisible(false);
                roomNoCB.setVisible(false);
                select = con.prepareStatement("select * from outpatient,patient where outpatient.patient_id = patient.patient_id and outpatient.patient_id = ?");
            } else {
                buildingLabel.setVisible(true);
                buildingCB.setVisible(true);
                roomLabel.setVisible(true);
                roomNoCB.setVisible(true);
                System.out.println("Patient");
                select = con.prepareStatement("select * from patient,inpatient where patient.patient_id = inpatient.patient_id and inpatient.patient_id = ?");
            }
            select.setInt(1, Integer.parseInt(id));

            ResultSet result = select.executeQuery();
            String doctor_of = null;
            String disease = "";
            String building = "";
            String room_no = "";
            while (result.next()) {
                String name = result.getString("name");
                int age = result.getInt("age");
                String gender = result.getString("gender");
                String address = result.getString("address");
                if (!tableNameLabel.getText().equals("Out Patients")) {
                    building = result.getString("building");
                }
                if (!tableNameLabel.getText().equals("Out Patients")) {
                    room_no = result.getString("room_no");
                }
                if (tableNameLabel.getText().equals("In Patients")) {
                    disease = result.getString("disease");
                }
                if (tableNameLabel.getText().equals("Doctors")) {
                    doctor_of = result.getString("doctor_of");
                } else {
                    doctor_of = result.getString("doctor_id");
                }
                String phn_no = result.getString("phn_no");
                setText(name, address, phn_no, age, gender, building, doctor_of, room_no, disease);
            }

        } catch (SQLException ex) {
            Logger.getLogger(AdminPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_dctrPatientTableMouseClicked

    private void outPateintBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outPateintBtnActionPerformed
        updateBillBtn.setVisible(false);
        dctrPatientTable.getColumnModel().getColumn(3).setHeaderValue("Date of Release");
        makeBillBtn.setVisible(false);
        tableNameLabel.setText("Out Patients");
        getOutPatient();
    }//GEN-LAST:event_outPateintBtnActionPerformed

    private void buildingSearchCB1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_buildingSearchCB1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_buildingSearchCB1FocusGained

    private void buildingSearchCB1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_buildingSearchCB1FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_buildingSearchCB1FocusLost

    private void patientPhnNoTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientPhnNoTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientPhnNoTfActionPerformed

    private void updateBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBillBtnActionPerformed

        DefaultTableModel table = (DefaultTableModel) dctrPatientTable.getModel();
        int index = dctrPatientTable.getSelectedRow();
        String id = table.getValueAt(index, 0).toString();
        new BillDialoge(id).setVisible(true);
    }//GEN-LAST:event_updateBillBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StaffPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> buildingCB;
    private javax.swing.JLabel buildingLabel;
    private javax.swing.JComboBox<String> buildingSearchCB1;
    private javax.swing.JButton dctrBtn;
    private javax.swing.JTextField dctrIdTf;
    private javax.swing.JTable dctrPatientTable;
    private javax.swing.JComboBox<String> diseaseCB;
    private javax.swing.JLabel diseaseLabel;
    private javax.swing.JLabel doctorIdlabel;
    private javax.swing.JComboBox<String> genderCB;
    private javax.swing.JButton idSearchBtn;
    private javax.swing.JTextField idSearchTf;
    private javax.swing.JButton inPatientBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton makeBillBtn;
    private javax.swing.JButton nameSearchBtn;
    private javax.swing.JButton outPateintBtn;
    private javax.swing.JTextField patientAddressTf;
    private javax.swing.JTextField patientAgeTf;
    private javax.swing.JTextField patientNameTf;
    private javax.swing.JTextField patientPhnNoTf;
    private javax.swing.JLabel roomLabel;
    private javax.swing.JComboBox<String> roomNoCB;
    private javax.swing.JComboBox<String> shortByCB;
    private javax.swing.JLabel tableNameLabel;
    private javax.swing.JButton updateBillBtn;
    private javax.swing.JLabel userlabel;
    // End of variables declaration//GEN-END:variables
}
